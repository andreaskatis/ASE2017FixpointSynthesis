\begin{thebibliography}{10}
\providecommand{\url}[1]{\texttt{#1}}
\providecommand{\urlprefix}{URL }

\bibitem{BarFT-SMTLIB}
Barrett, C., Fontaine, P., Tinelli, C.: {The Satisfiability Modulo Theories
  Library (SMT-LIB)}. {\tt www.SMT-LIB.org} (2016)

\bibitem{beyene2014constraint}
Beyene, T., Chaudhuri, S., Popeea, C., Rybalchenko, A.: A constraint-based
  approach to solving games on infinite graphs. In: ACM SIGPLAN Notices.
  vol.~49, pp. 221--233. ACM (2014)

\bibitem{bodlaender2012cinderella}
Bodlaender, M.H.L., Hurkens, C.A., Kusters, V.J., Staals, F., Woeginger, G.J.,
  Zantema, H.: Cinderella versus the wicked stepmother. In: IFIP International
  Conference on Theoretical Computer Science. pp. 57--71. Springer (2012)

\bibitem{bradley2011sat}
Bradley, A.R.: Sat-based model checking without unrolling. In: International
  Workshop on Verification, Model Checking, and Abstract Interpretation. pp.
  70--87. Springer (2011)

\bibitem{church1962logic}
Church, A.: Logic, arithmetic and automata. In: Proceedings of the
  international congress of mathematicians. pp. 23--35 (1962)

\bibitem{DBLP:conf/fmcad/CimattiGMT13}
Cimatti, A., Griggio, A., Mover, S., Tonetta, S.: Parameter synthesis with
  {IC3}. In: {FMCAD}. pp. 165--168. {IEEE} (2013)

\bibitem{cimatti2015hycomp}
Cimatti, A., Griggio, A., Mover, S., Tonetta, S.: Hycomp: An smt-based model
  checker for hybrid systems. In: International Conference on Tools and
  Algorithms for the Construction and Analysis of Systems. pp. 52--67. Springer
  (2015)

\bibitem{claessen2012liveness}
Claessen, K., S{\"o}rensson, N.: A liveness checking algorithm that counts. In:
  Formal Methods in Computer-Aided Design (FMCAD), 2012. pp. 52--59. IEEE
  (2012)

\bibitem{een2011efficient}
Een, N., Mishchenko, A., Brayton, R.: Efficient implementation of property
  directed reachability. In: Formal Methods in Computer-Aided Design (FMCAD),
  2011. pp. 125--134. IEEE (2011)

\bibitem{fedyukovich2015automated}
Fedyukovich, G., Gurfinkel, A., Sharygina, N.: Automated discovery of
  simulation between programs. In: Logic for Programming, Artificial
  Intelligence, and Reasoning. pp. 606--621. Springer (2015)

\bibitem{flener2001inductive}
Flener, P., Partridge, D.: Inductive programming. Automated Software
  Engineering  8(2),  131--137 (2001)

\bibitem{jkind}
Gacek, A.: {JK}ind -- an infinite-state model checker for safety properties in
  {Lustre}. \url{http://loonwerks.com/tools/jkind.html} (2016)

\bibitem{gacek2015towards}
Gacek, A., Katis, A., Whalen, M.W., Backes, J., Cofer, D.: Towards
  realizability checking of contracts using theories. In: NASA Formal Methods
  Symposium. pp. 173--187. Springer (2015)

\bibitem{gulwani2010dimensions}
Gulwani, S.: Dimensions in program synthesis. In: Proceedings of the 12th
  international ACM SIGPLAN symposium on Principles and practice of declarative
  programming. pp. 13--24. ACM (2010)

\bibitem{hagen2008scaling}
Hagen, G., Tinelli, C.: Scaling up the formal verification of lustre programs
  with smt-based techniques. In: Formal Methods in Computer-Aided Design, 2008.
  FMCAD'08. pp. 1--9. IEEE (2008)

\bibitem{lustrev6}
Jahier, E., Raymond, P., Halbwachs, N.: {The Lustre V6 Reference Manual},
  \url{http://www-verimag.imag.fr/Lustre-V6.html}

\bibitem{katis2016towards}
Katis, A., Gacek, A., Whalen, M.W.: Towards synthesis from assume-guarantee
  contracts involving infinite theories: a preliminary report. In: Formal
  Methods in Software Engineering (FormaliSE), 2016 IEEE/ACM 4th FME Workshop
  on. pp. 36--41. IEEE (2016)

\bibitem{kuncak2013functional}
Kuncak, V., Mayer, M., Piskac, R., Suter, P.: Functional synthesis for linear
  arithmetic and sets. International Journal on Software Tools for Technology
  Transfer  15(5-6),  455--474 (2013)

\bibitem{piterman2006synthesis}
Piterman, N., Pnueli, A., Sa’ar, Y.: Synthesis of reactive (1) designs. In:
  International Workshop on Verification, Model Checking, and Abstract
  Interpretation. pp. 364--380. Springer (2006)

\bibitem{pnueli1989synthesis}
Pnueli, A., Rosner, R.: On the synthesis of a reactive module. In: Proceedings
  of the 16th ACM SIGPLAN-SIGACT symposium on Principles of programming
  languages. pp. 179--190. ACM (1989)

\bibitem{preiner2017counterexample}
Preiner, M., Niemetz, A., Biere, A.: Counterexample-guided model synthesis. In:
  International Conference on Tools and Algorithms for the Construction and
  Analysis of Systems. pp. 264--280. Springer (2017)

\bibitem{reynolds2015counterexample}
Reynolds, A., Deters, M., Kuncak, V., Tinelli, C., Barrett, C.:
  Counterexample-guided quantifier instantiation for synthesis in smt. In:
  International Conference on Computer Aided Verification. pp. 198--216.
  Springer (2015)

\bibitem{ryzhyk2016developing}
Ryzhyk, L., Walker, A.: Developing a practical reactive synthesis tool:
  Experience and lessons learned. arXiv preprint arXiv:1611.07624  (2016)

\bibitem{ryzhyk2014user}
Ryzhyk, L., Walker, A., Keys, J., Legg, A., Raghunath, A., Stumm, M., Vij, M.:
  User-guided device driver synthesis. In: OSDI. pp. 661--676 (2014)

\bibitem{srivastava2013template}
Srivastava, S., Gulwani, S., Foster, J.S.: Template-based program verification
  and program synthesis. International Journal on Software Tools for Technology
  Transfer  15(5-6),  497--518 (2013)

\end{thebibliography}
